(()=>{"use strict";0===localStorage.length&&localStorage.setItem("todoObject",JSON.stringify({projects:[{title:"Sample Project",projectTodos:[{title:"Start todo project",dueDate:"11-Aug-7024",description:"Basically this is the sample todo for my website testing :)",urgency:"high",status:!1},{title:"Finish todo project",dueDate:"23-Jan-2024",description:"In this one basically yea we have to check if project is finished :3",urgency:"medium",status:!1}]},{title:"Another Sample Project",projectTodos:[{title:"Hug lots of kitties",dueDate:"29-Sep-2024",description:"Make sure to hug em, and pat em too",urgency:"low",status:!1},{title:"Take sufficient zZzzs",dueDate:"29-Jul-2024",description:"Take care of your health and sleep well!",urgency:"high",status:!1}]}],todays:[{title:"Buy milk",dueDate:"Today",description:"Go buy milk before your dad goes to buy it",urgency:"high",status:!1}],upcoming:[{title:"live lol",dueDate:"01-jan-2030",description:"idk? thats an upcoming thing for idk how much time lol..",urgency:"medium",status:!1}]}));let e=JSON.parse(localStorage.getItem("todoObject")),t=[],o="",n="",c="",d={},l=e,i="";const s=()=>{l=e;const t=document.querySelector(".project-cards");if(0!=l.projects.length){for(let e=0;e<l.projects.length;e++){let o=document.createElement("div");o.classList="card",o.textContent=l.projects[e].title,t.appendChild(o);let n=document.createElement("div");n.classList="trash";let c=document.createElement("div");c.classList="edit-title-name",o.appendChild(c),o.appendChild(n)}let n=document.querySelectorAll(".trash"),d=document.querySelectorAll(".edit-title-name"),i=document.querySelector(".project-cards"),r=document.querySelectorAll(".card"),u=document.querySelector("#project-form");n.forEach(((t,o)=>{t.addEventListener("click",(t=>{(t=>{e.projects.splice(t,1),localStorage.setItem("todoObject",JSON.stringify(e))})(o),i.innerHTML="",s(),t.stopImmediatePropagation()}))})),d.forEach(((e,t)=>{e.addEventListener("click",(e=>{o="editProjectTitle",c=t,u.showModal(),e.stopImmediatePropagation()}))})),r.forEach(((e,t)=>{e.addEventListener("click",(()=>{a(t)}))}))}else{let e=document.createElement("h2");e.textContent="Sorry, no projects to display.. Add a new project?",t.appendChild(e)}r(t)},r=e=>{let t=document.createElement("div");t.classList="add-project-btn",t.textContent="+",e.appendChild(t);let n=document.querySelector("#project-form");t.addEventListener("click",(()=>{o="addProject",n.showModal()}))};document.querySelector(".plus-project-btn").addEventListener("click",(()=>{let t=document.querySelector(".project-cards"),n=document.querySelector("#project-title").value,d=document.querySelector(".project-form-element"),l=document.querySelector("#project-form");""!=n&&(t.innerHTML="","addProject"===o?(t=>{let o={title:t,projectTodos:[]};e.projects.push(o),console.log("hello!"),console.log(e),localStorage.setItem("todoObject",JSON.stringify(e)),console.log("hello!")})(n):"editProjectTitle"===o&&((t,o)=>{let n=o;e.projects[t].title=n,localStorage.setItem("todoObject",JSON.stringify(e))})(c,n),l.close(),d.reset(),s())}));const a=e=>{let t=document.querySelector("#content");t.innerHTML="",v();let o=document.createElement("h1");o.classList="heading",o.textContent=l.projects[e].title,t.appendChild(o),m(t,l.projects[e].projectTodos)},u=e=>{let t=document.querySelector("#content");t.innerHTML="",v();let o=[],n=document.createElement("h1");if(n.classList="heading","today"===e){const e=(new Date).toDateString().slice(0,15);n.textContent=e,i=e,o=l.todays}else n.textContent="Upcoming",o=l.upcoming;t.appendChild(n),m(t,o)},m=(o,c)=>{if(0!=c.length)for(let e=0;e<c.length;e++){let t=document.createElement("div"),n="",d="";!0===c[e].status?n="checked":!0===c[e].status&&(n=""),"high"===c[e].urgency?d="rgb(225, 132, 127)":"medium"===c[e].urgency?d="rgb(250, 250, 175)":"low"===c[e].urgency&&(d="white"),t.classList="accordion",t.style.backgroundColor=d,t.innerHTML=`<div class="accordion-expander">\n                                    <input type="checkbox" class="accordion-input" ${n}/>\n                                    <div class="accordion-btn">${c[e].title}</div> \n                                </div>\n                                \n                                <div class="accordion-content">\n                                    <p class="todo-description">${c[e].description}</p>\n                                    <p>Due Date: ${c[e].dueDate}</p>\n                                    <p class="todo-urgency">Priority: ${c[e].urgency}</p>\n                                    <div class="accordion-content-btns">\n                                        <button class="delete-todo" type="button">Delete</button>\n                                        <button class="edit-todo" type="button">Edit</button>\n                                    </div>\n                                </div>`,o.appendChild(t)}else{let e=document.createElement("h2");e.textContent="No tasks to display.. Add one?",o.appendChild(e)}document.querySelectorAll(".delete-todo").forEach(((t,n)=>{t.addEventListener("click",(()=>{let t=document.querySelector("#content"),d=document.querySelector("h1").textContent;t.innerHTML="";let l=document.createElement("h1");var i,s;l.classList="heading",l.textContent=d,i=c,s=c[n],i.splice(s,1),localStorage.setItem("todoObject",JSON.stringify(e)),v(),t.appendChild(l),m(o,c)}))}));let l=document.querySelectorAll(".edit-todo"),i=document.querySelector("#todo-form");l.forEach(((e,o)=>{e.addEventListener("click",(()=>{n="editTodo",d=c[o],i.showModal(),t=c}))})),document.querySelectorAll(".accordion-input").forEach(((t,o)=>{t.addEventListener("click",(t=>{var n;(n=c[o]).status=!n.status,localStorage.setItem("todoObject",JSON.stringify(e)),t.stopImmediatePropagation()}))})),document.querySelectorAll(".accordion-expander").forEach((e=>{e.addEventListener("click",(()=>{e.classList.toggle("accordion-expander-active")}))})),p(o,c)},p=(e,o)=>{const c=document.createElement("div");c.classList="add-todo-btn",c.textContent="+",e.appendChild(c);let d=document.querySelector("#todo-form");c.addEventListener("click",(()=>{n="addTodo",d.showModal(),t=o}))};document.querySelector(".plus-todo-btn").addEventListener("click",(()=>{let o=document.querySelector("#title").value,c=document.querySelector("#description").value,l=document.querySelector("#date").value,s=document.querySelector('input[name="urgency"]:checked').value,r=document.querySelector(".tasks-form"),a=document.querySelector("#todo-form");if(""!=o&&""!=c&&""!=l){let p=document.querySelector("h1").textContent,h=document.querySelector("#content");h.innerHTML="";let y=document.createElement("h1");if(y.classList="heading",y.textContent=p,v(),h.appendChild(y),"addTodo"===n){y.textContent===i&&(l="Today");let n=((e,t,o,n)=>({title:e,dueDate:o,description:t,urgency:n,status:!1}))(o,c,l,s);u=n,t.push(u),localStorage.setItem("todoObject",JSON.stringify(e))}else"editTodo"===n&&(y.textContent===i&&(l="Today"),((t,o,n,c,d)=>{let l=t;l.title=o,l.description=n,l.dueDate=c,l.urgency=d,localStorage.setItem("todoObject",JSON.stringify(e))})(d,o,c,l,s));a.close(),r.reset(),m(h,t)}var u}));const h=function(){const e=document.querySelector("#content"),t=document.createElement("div");t.classList="projects",e.appendChild(t);const o=document.createElement("h1");o.classList="heading",o.textContent="Projects",t.appendChild(o);const n=document.createElement("div");n.classList="project-cards",t.appendChild(n),s()},y=function(){const e=document.querySelector("#content"),t=document.createElement("div");t.classList="todo",e.appendChild(t);const o=document.createElement("h1");o.classList="todo-heading",o.textContent="To Do Lists",t.appendChild(o);const n=document.createElement("div");n.classList="todo-items",t.appendChild(n);const c=document.createElement("div");c.classList="todays-btn",c.textContent="Today",n.appendChild(c);const d=document.createElement("div");d.classList="upcoming-btn",d.textContent="Upcoming",n.appendChild(d),c.addEventListener("click",(()=>{u("today")})),d.addEventListener("click",(()=>{u("upcoming")}))},g=function(){const e=document.querySelector("#content"),t=document.createElement("div");t.classList="home",e.appendChild(t);const o=document.createElement("h1");t.classList="heading",o.innerHTML='<div class="home-row">Home<img class="home-icon" src="./images/home.png" /><div/>',t.appendChild(o);const n=document.createElement("div");n.classList="home-items",t.appendChild(n);const c=document.createElement("div");c.classList="projects-btn",c.textContent="Projects",n.appendChild(c);const d=document.createElement("div");d.classList="todo-btn",d.textContent="Todo",n.appendChild(d),c.addEventListener("click",(()=>{e.innerHTML="",v(),h()})),d.addEventListener("click",(()=>{e.innerHTML="",v(),y()}))},v=function e(){const t=document.querySelector("#content");let o=document.createElement("div");o.classList="navbar",t.appendChild(o);let n=document.createElement("div");n.classList="nav-home",n.textContent="Home",o.appendChild(n);let c=document.createElement("div");c.classList="nav-projects",c.textContent="Projects",o.appendChild(c);let d=document.createElement("div");d.classList="nav-todos",d.textContent="Todos",o.appendChild(d),n.addEventListener("click",(()=>{t.innerHTML="",e(),g()})),c.addEventListener("click",(()=>{t.innerHTML="",e(),h()})),d.addEventListener("click",(()=>{t.innerHTML="",e(),y()}))};v(),g()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,